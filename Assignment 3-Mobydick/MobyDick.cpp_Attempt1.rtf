{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red100\green56\blue32;\red196\green26\blue22;
\red170\green13\blue145;\red28\green0\blue207;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab480
\pard\tx480\pardeftab480\ql\qnatural\pardirnatural

\f0\fs20 \cf2 \CocoaLigature0 /*\
 Author: Kristin Ottofy\
 Date: June 28, 2010\
 Program Name: MobyDick\
 */\cf0 \
\
\cf3 #include \cf4 <fcntl.h>\cf3 \
#include \cf4 <iostream>\cf3 \
#include \cf4 <string>\cf3 \
#include \cf4 <stdlib.h>\cf3 \
#include \cf4 <stdio.h>\cf3 \
\cf0 \
\cf5 using\cf0  \cf5 namespace\cf0  std;\
\
\cf3 #define BUFSIZE \cf6 4096\cf3 \
\cf0 \
\cf5 int\cf0  main (\cf5 int\cf0  argc, \cf5 char\cf0  *argv[])\
\{\
	\cf5 int\cf0  fileEnd;	\cf2 //will be set to the length of the Moby Dick text\cf0 \
	string text;	\
	\cf5 int\cf0  argCount = \cf6 0\cf0 ;	\
	\cf5 int\cf0  textCount = \cf6 0\cf0 ;\
	\cf5 int\cf0  str1Count = \cf6 0\cf0 ;\
	\cf5 int\cf0  strTextCount = \cf6 0\cf0 ;\
	\cf5 int\cf0  outputStr2Count = \cf6 0\cf0 ;\
	\cf5 int\cf0  size = strlen(argv[\cf6 1\cf0 ]);\
	string str1(argv[\cf6 1\cf0 ]);		\cf2 //copy of argv[1] that will have removed characters\cf0 \
	string outputStr2[size];	\cf2 //will be used for the output\cf0 \
	string  strText(argv[\cf6 1\cf0 ]);	\cf2 //will be string from text \cf0 \
	string anagram(argv[\cf6 1\cf0 ]);	\cf2 //convert argv[1] to a string \cf0 \
	\cf2 //(for my code only: anagram is the scrambled bunch of letters)\cf0 \
	\
	getline(cin, text);	\cf2 //sets string text to the Moby Dick text\cf0 \
	fileEnd = text.length();\
\cf2 //	cout<<fileEnd;\cf0 \
\cf2 //	cout<<anagram;\cf0 \
	\
	\cf2 //check to see if user has entered correct number of parameters\cf0 \
	\cf5 if\cf0 (argc != \cf6 2\cf0 )\
	\{\
		printf(\cf4 "Wrong number of parameters.\\n"\cf0 );\
		exit(\cf6 1\cf0 );\
	\}\
	\
	\cf2 // PROBLEM: WHAT IF ANAGRAM IS AT BEGINNING OF TEXT --> BUF NEEDS TO BE SHORTER!!!!!!!!!\cf0 \
	\
	\cf5 while\cf0  (textCount < fileEnd)	\cf2 //while searching through the text until we reach the end\cf0 \
	\{\
		\cf5 if\cf0  ( text[textCount] == anagram[argCount])  \cf2 //if the letter in the text matches the first letter of the anagram\cf0 \
	    \{\
			\cf2 //cout<<text[textCount];\cf0 \
			textCount = textCount - size;	\cf2 //set textCount back to before the letter found to search for anagram letters before\cf0 \
\
			\cf2 //strEdit will be set to the letters around the letter found\cf0 \
			\cf5 while\cf0  (strTextCount < size*\cf6 2\cf0 -\cf6 2\cf0 )	\cf2 //set to size*2-2 to count for the 0 index\cf0 \
			\{\
				strText[strTextCount] = text[textCount + \cf6 1\cf0 ];	\cf2 //set to textCount + 1 because textCount is currently set to one character before needed\cf0 \
				strTextCount++;\
				textCount++;\
			\}\
			\
			textCount = textCount - (size-\cf6 1\cf0 );	\cf2 //set textCount back to the character found since after while loop it will be too high\cf0 \
			strTextCount = \cf6 0\cf0 ;	\
			cout<<strText;\
			\
		\cf5 while\cf0  (argCount < str1.length()-\cf6 1\cf0 )\
			\{\
				\cf5 while\cf0  (str1Count < str1.length()-\cf6 1\cf0 )	\cf2 //here compare each letter in anagram and in string to be edited, if equal chars then create new string\cf0 \
				\{\
					\cf5 if\cf0  (strText[strTextCount] == anagram[argCount])	\cf2 //if the characters in the text string are equal to the \cf0 \
					\{\
						outputStr2[outputStr2Count] =strText[strTextCount];	\cf2 //then add that character to a new string\cf0 \
					\
						\cf5 while\cf0  (str1[str1Count] != \cf6 0\cf0 )	\cf2 //remove a letter from the copy of the anagram so the loop won't search for the same letter again\cf0 \
						\{\
							str1[str1Count] = str1[str1Count +\cf6 1\cf0 ];\
							str1Count++;\
							cout << str1;\
						\}\
						cout<<outputStr2;\
						outputStr2Count++;\
					\}\
					str1Count++;\
				\}\
				argCount++;\
			\}\
	    \}\
		str1 = anagram;\
		textCount++;\
		argCount=\cf6 0\cf0 ;\
	\}\
	cout<<outputStr2;\
\}\
\
\cf5 void\cf0  remove(\cf5 char\cf0 * str[], )\
\{\
	\
\}\
}