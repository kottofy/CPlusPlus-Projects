{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
------------------------------------------------------------------------------\
MobyDick.cpp\
\
Description\
-------------------------------------------------------------------------------\
\
 The purpose of this program is to introduce you to programming in C/C++ using \
 strings and arrays. Name the program MobyDick.cpp.\
 As usual make sure to modularize your \
 program properly (use functions when appropriate) and include meaningful \
 comments.\
\
 You program should find the below anagram in the text Moby Dick by Herman\
 Melville:\
 	taffomeatscenicicalinati\
\
 These 24 letters appear in one or more phrases in the text.\
\
 An anagram is a string of letters that are scrambled or have transposed \
 another word or phrase. As an example, the string:\
	Itsgrace \
 is an anagram for the phrase:\
	C is great\
 Note that an anagram consists of letters and digits. \
 All spaces in the text are ignored. \
 All texts are NOT case sensitive.\
\
 Hence, your program needs to solve:\
\
    What is the phrase, or phrases, and where do they appear in the book that\
    matches the anagram "taffom eat scenicicalinati"?\
\
\
 You should read the MobyDick text from standard input (i.e. enables you to\
 use getchar or cin).\
\
 The characters in the anagram (the original search string) may be upper or \
 lower case.\
\
 The text is available at:\
	http://www.textlibrary.com/download/moby-dic.txt\
\
 already downloaded text is available on the class schedule web page.\
\
 NOTE 1:\
  To read the file using standard input, that enables you to use standard cin\
  statement, you redirect the file "moby-dick.txt to standard in on the \
  command line by using the\
  operator "<". For example if your executable file is called "MobyDick.out" you \
  execute the program as follows:\
\
	MobyDick.out  < moby-dick.txt\
\
\
 NOTE 2:\
  Your program should provide an option to allow user to provide other test strings\
  so that the TA can test simpler cases and give you partial points even your program\
  fails to find matchings for complex anagram. To allow you earn partial points, \
  your program should run in the follow way with a command line parameter. For example,\
  if you want to search for the matching of "MOBYD" (without the quotation signs), your \
  execute the program as follows:\
\
       MobyDick.out MOBYD < moby-dick.txt\
\
  In this example, your program is expected to find the matching on the first line. \
\
\
\
 SUBMIT REQUIREMENTS:\
  * print the decoded anagram(s) and its location (i.e. the line number) in the text.\
  * properly commented code.\
\
  * You must submit at least the following files (i.e., all the files\
    necessary to compile your program):\
\
        README.txt\
        MobyDick.cpp\
        Makefile\
\
 In the "README.txt", you should list your name and the command used for compiling your \
 code. If your makefile does not work, TA will try to use the command in your "README.txt"\
 compile your code. The name of your excutable file should be "MobyDick.out". The\
 command format for excuting your excutable file should be\
        MobyDick.out anagram < moby-dick.txt\
\
 To submit the files, you will need to use the submit program.  Your files\
 need to be under a common subdirectory called "1730_program3"\
\
 Execute the below command line while being above the directory 1730_program3\
 that you just created:\
   submit 1730_program3 cs1730\
\
 NOTE: you need to be LOGGED ONTO odin when you execute the submit command.\
\
--------------------------------------------------------------------------------\
\
Grading Policy from the TA  (test cases will be release later)\
\
Up to 10 BONUS POINTS for speed: \
\
The top 5 Fastest (most efficient) project will receive bonus (we will \
determine this by using the Unix time command when grading). \
Winner will receive an additional 10, 8, 6, 4, 2 points respectively.\
\
grading calculation (test cases will be released later)\
\
  submit valid readme file 10 points\
  submit valid make file   10 points.\
  test case 1 20 points\
  test case 2 20 points\
  test case 3 20 points\
  test case 4 20 points\
\
top 5 fast projects 20, 16, 12, 8, 4 points for bonus (over this project's total\
grade, which is 100 points).\
\
Note that assignment that can not be compiled will be graded ZERO.\
Assignments more than 24 hours late are not acceptable (grated ZERO).\
\
------------------------------------------------------------------------------\
\
\
}