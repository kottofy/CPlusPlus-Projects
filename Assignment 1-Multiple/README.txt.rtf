{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf540
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0    Author: Kristin Ottofy\
   Date: June 14, 2010\
   File name: README.txt\
\
README.txt explains how the program Multiple works and how to run \
and compile Multiple.c. \
\
The program Multiple will take 2 integers and determine if the first\
is a multiple of the second. If the user enters too many or too few\
parameters, the program will show an error message and then terminate. \
If the user enters parameters that are not integers, the program will\
display an error message and also terminate. It will then determine \
if the first integer is a multiple of the second and tell the user \
if it is or not. The program will then be a success and display the \
integers that the user has entered. \
\
Directions on how to run the program. \
First, you will need compile the Multiple.c file by typing \
"gcc Multiple.c -o Multiple" (without the quotes) and hit the enter\
button. Now you should be able to run the program by typing \
"./Multiple", followed with the 2 parameters you would like to test \
(seperated with a space), then hit enter. For example, to test the \
numbers 2 and 1, the user will type "./Multiple 2 1" (without the quotes) \
and hit the enter button, and the program will successfully run and display:\
\
2 is a multiple of 1.\
Parameter 1 is 2\
Parameter 2 is 1\
\
To test another 2 numbers, just repeat the last step with your new numbers.\
\
Multiple will test any negative numbers successfully, but will not \
recognize UNIX command characters like '#', '&', or '*'. The program \
will most likely tell you that you have not entered enough parameters\
since those characters are actually commands.\
}